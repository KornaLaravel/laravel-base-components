<?php

declare(strict_types=1);

namespace Rawilk\LaravelBase\Models;

use App\Enums\PermissionEnum;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Support\Collection;
use Illuminate\Support\Str;
use Spatie\Permission\Contracts\Permission as PermissionContract;
use Spatie\Permission\Exceptions\PermissionDoesNotExist;
use Spatie\Permission\Guard;
use Spatie\Permission\Models\Permission as BasePermission;

class Permission extends BasePermission
{
    protected $hidden = ['pivot'];

    protected $touches = ['roles'];

    /*
     * We will prefer to use the description provided by the enum, so we can
     * translate it easier, if needed.
     */
    protected function description(): Attribute
    {
        return Attribute::make(
            get: fn (): ?string => PermissionEnum::tryFrom($this->name)?->description(),
        )->shouldCache();
    }

    /**
     * Get all the permissions grouped by the first part
     * of their name. Useful for rendering them
     * in groups in the UI.
     */
    public static function groupedPermissions(): Collection
    {
        return static::query()
            ->get(['id', 'name'])
            ->sortBy('name')
            ->groupBy(function ($permission) {
                if (! Str::contains($permission->name, '.')) {
                    return __('base::permissions.uncategorized');
                }

                $group = Str::of($permission->name)
                    ->explode('.', 2)
                    ->first();

                return Str::of($group)
                    ->explode('_')
                    ->join(' ');
            });
    }

    /*
     * This code can be removed once Spatie releases v6 of the permissions package.
     */
    public static function findById($id, $guardName = null): PermissionContract
    {
        $guardName = $guardName ?? Guard::getDefaultName(static::class);
        $permission = static::getPermission([(new static())->getKeyName() => $id, 'guard_name' => $guardName]);

        if (! $permission) {
            throw PermissionDoesNotExist::withId($id, $guardName);
        }

        return $permission;
    }

    public static function findByName(string $name, $guardName = null): PermissionContract
    {
        if (Role::isUid($name)) {
            return static::findById($name, $guardName);
        }

        return parent::findByName($name, $guardName); // TODO: Change the autogenerated stub
    }
}
